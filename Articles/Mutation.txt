Мутация в JavaScript – это изменение объекта или массива без создания новой переменной и переприсваивания значения.
const puppy = {
  name: 'Dessi',
  age: 9
};
puppy.age = 10;

Оригинальный объект puppy мутировал: мы изменили значение поля age.
Оригинальный объект puppy мутировал: мы изменили значение поля age.
Проблемы с мутациями
Казалось бы – ничего страшного. Но такие маленькие изменения могут приводить к большим проблемам.


function printSortedArray(array) {
  array.sort();
  for (const item of array) {
    console.log(item);
  }
}

Когда мы вызываем функцию с названием printSortedArray, то обычно не думаем о том, что она что-то сделает с полученными данными.
Но здесь встроенный метод массива sort() изменяет оригинальный массив. Так как массивы в JavaScript передаются по ссылке,
то последующие операции будут иметь дело с обновленным, отсортированным порядком элементов.
Подобные ошибки трудно заметить, ведь операции выполняются нормально – только с результатом что-то не так.
Функция рассчитывает на один аргумент, а получает «мутанта» – результат работы другой функции.
Решением являются иммутабельные (неизменяемые) структуры данных. Эта концепция предусматривает создание нового объекта для каждого обновления.
Если у вас есть 9-месячный puppy, который внезапно подрос, придется записать его в новую переменную grownUpPuppy.
К сожалению, иммутабельность из коробки в JavaScript не поддерживается. Существующие решения – это более или менее кривые костыли.
Но если вы будете максимально избегать мутаций в коде, код станет понятнее и надежнее.

Помните!
Ключевое слово const в JavaScript защищает от изменения переменную, но не ее значение!
Вы не сможете присвоить этой переменной другой объект, но вполне можете изменить поля оригинального объекта.


Иммутабельным(неизменяемым) называется объект состояние которого не может быть изменено после создания.
Результатом изменения такого объекта является новый объект. Старый остается неизменяемым

Задача 1.
let arr = [44,55,66,77] //у нас есть массив который содержит указанные элементы
console.log(arr)
//применим к массиву метод pop удаляющий последний элемент массива и возвращает удаленное значение
arr.pop()// метод pop является мутабельным методом и изменяет сам объект
console.log(arr)
// Что нам надо сделать, чтобы модифицировать данный метод
// и написать ему замену который создаст новый массив на основе
//текущего с уже удаленным последним элементом?

Решение:
let arr = [44,55,66,77]
let imm;
imm = arr.slice(0,-1)
что мы сделали? Мы написали аналог метода pop который не изменяет исходный объект, а возвращает новый объект с удаленным последним элементом
