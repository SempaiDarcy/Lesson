Функции высшего порядка (HOF) в JavaScript
Функции высшего порядка (higher order functions) в JavaScript - необходимый строительный блок функционального программирования на любом языке.

Функция более высокого порядка выполняет по крайней мере одну (чаще обе) из следующих вещей:

принимает функцию в качестве аргумента;
возвращает новую функцию.


    // function twoSquared() {//не принмиает никаких парамтеров но внутри себя возвращает значение 2*2 и каждый раз возвращает одно и тоже
    //     return 2*2
    // }
    // function threeSquared() {//не принмиает никаких парамтеров но внутри себя возвращает значение 3*3 и каждый раз возвращает одно и тоже
    //     return 3*3
    // }
    // //когда нам нужно будет создавать функции которые делают тоже самое что и функции выше, но для других чисел мы попадем в ситуацию когда нам нужно будет создавать
    // //тонну таких функций
    // function numSquared(num) {// функция ожидает внутри параметр
    //     return num*num// в данном случае передаваемое число будет всегда умнажать саму на себя. Таким образом нам не нужны функции выше
    // }

    function copyArrayAndSquareNums(arr) {// в данном случае создадим функцию которая принимает в качестве аргумента массив и
        // пушит в новый массив удвоенные значения старого массива
        const  output = []
        for (let i = 0; i<arr.length;i++){
            output.push(arr[i]**2)
        }
        return output;
    }
    console.log(copyArrayAndSquareNums([1,2,3,4]))

    function copyArrayAndDivideByTwo(arr) {// в данном случае создадим функцию которая принимает в качестве аргумента массив и
        // пушит в новый массив значение передаваемого в аргумент массива деленные на 2
        const  output = []
        for (let i = 0; i<arr.length;i++){
            output.push(arr[i]/2)
        }
        return output;
    }
    console.log(copyArrayAndDivideByTwo([10,20,30]))

    //проблема двух функции в том, что они делают по сути одно и тоже , то есть у них есть отличающаяся часть, которая заключена в скобки
    // и возникает вопрос, а можем ли мы в эту функцию параметром передать функцию , чтобы она в скобках что-то делала?
    //Да, можем.

    function copyArrayAndDoSomething(arr,instructions) {//у нас есть функция способная принимать некую инструкцию(функцию)
        const  output = []
        for (let i = 0; i<arr.length;i++){
            output.push(instructions(arr[i]))
        }
        return output;
    }
    function numSquared(num) {
        return num*num
    }
    console.log(copyArrayAndDoSomething([10,20,30],numSquared))// десь мы просто говорим. Вот тебе функция в качестве параметра и даем на нее ссылку.
    // Далее , в качестве массива мы получим 10,20,30, будем над каждым переданным значением выполнять операцию
    //если захотим использовать другую операцию мы просто создадим новую функцию и передадим ее в функцию выше(copyArrayAndDoSomething(arr,instructions))
    function divideBy2(num) {
        return num/2
    }
    console.log(copyArrayAndDoSomething([10,20,30],divideBy2))

Функции вычшего порядка это функции которые принимают функцию в качетсве параметра
Пример:
function copyArrayAndDoSomething(arr,instructions) {//у нас есть функция способная принимать некую инструкцию(функцию),
//она могла бы не принимать функцию, но могла бы создать ее внутри себя и вернуть функцию наружу
        const  output = []
        for (let i = 0; i<arr.length;i++){
            output.push(instructions(arr[i]))
        }
        return output;
    }

    но и также функции которые внутри себя создают новые функции и возвращают их через оператор return

    Ниже представлены коллбэки которые являются функциями которые мы напрямую не вызываем,
    а передаем ей в качестве параметров какие то другие функции или методы
     function numSquared(num) {
            return num*num
        }

     function divideBy2(num) {
                return num/2
        }